Parameters:
  LambdaFunctionName:
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
    Description: The name of the Lambda function to be deployed
    Default: Lambda-DynamoDB-Function-CFNExample

  LambdaRoleName:
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role-CFNExample

  LambdaPolicyName:
    Type: String
    MinLength: "1"
    MaxLength: "128"
    AllowedPattern: '[\w+=,.@-]+'
    Default: Lambda-Policy-CFNExample

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              !Join [
                "",
                [
                  "arn:",
                  !Ref AWS::Partition,
                  ":logs:",
                  !Ref AWS::Region,
                  ":",
                  !Ref AWS::AccountId,
                  ":log-group:/aws/lambda/",
                  !Ref LambdaFunctionName,
                  ":*",
                ],
              ]
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref LambdaFunctionName]]
      RetentionInDays: 30

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Print incoming events
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.10
      Handler: index.lambda_handler
      Role: !GetAtt "LambdaRole.Arn"
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print(event)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger lambda in every 10 minutes
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "LambdaFunction"
              - "Arn"
          Id: TargetFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"
